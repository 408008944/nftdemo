package com.example.nftdemo.utils;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.*;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

import java.math.BigInteger;
import java.util.*;
import java.util.concurrent.Callable;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class MITNft extends Contract {
    public static final String BINARY = "0x60a06040819052600060808190526200001b91600d91620002a7565b503480156200002957600080fd5b5060405162003cd238038062003cd28339810160408190526200004c916200041a565b83838383838381600290805190602001906200006a929190620002a7565b50805162000080906003906020840190620002a7565b5050600c805460ff19169055508151620000a290600d906020850190620002a7565b50620000b060003362000142565b620000dc7f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b088262000142565b620001087f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a63362000142565b620001347f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a3362000142565b50505050505050506200050a565b6200014e828262000152565b5050565b6200016982826200019560201b620017761760201c565b6000828152600160209081526040909120620001909183906200181462000235821b17901c565b505050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff166200014e576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620001f13390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006200024c836001600160a01b03841662000255565b90505b92915050565b60008181526001830160205260408120546200029e575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556200024f565b5060006200024f565b828054620002b590620004cd565b90600052602060002090601f016020900481019282620002d9576000855562000324565b82601f10620002f457805160ff191683800117855562000324565b8280016001018555821562000324579182015b828111156200032457825182559160200191906001019062000307565b506200033292915062000336565b5090565b5b8082111562000332576000815560010162000337565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200037557600080fd5b81516001600160401b03808211156200039257620003926200034d565b604051601f8301601f19908116603f01168101908282118183101715620003bd57620003bd6200034d565b81604052838152602092508683858801011115620003da57600080fd5b600091505b83821015620003fe5785820183015181830184015290820190620003df565b83821115620004105760008385830101525b9695505050505050565b600080600080608085870312156200043157600080fd5b84516001600160401b03808211156200044957600080fd5b620004578883890162000363565b955060208701519150808211156200046e57600080fd5b6200047c8883890162000363565b945060408701519150808211156200049357600080fd5b50620004a28782880162000363565b606087015190935090506001600160a01b0381168114620004c257600080fd5b939692955090935050565b600181811c90821680620004e257607f821691505b602082108114156200050457634e487b7160e01b600052602260045260246000fd5b50919050565b6137b8806200051a6000396000f3fe608060405234801561001057600080fd5b506004361061030a5760003560e01c80638456cb591161019c578063c87b56dd116100ee578063dbeb4e8f11610097578063e985e9c511610071578063e985e9c5146106da578063eb699f2214610716578063ec87621c1461072957600080fd5b8063dbeb4e8f1461068d578063dc8e92ea146106a0578063e63ab1e9146106b357600080fd5b8063d5391393116100c8578063d539139314610633578063d547741f1461065a578063d5ec2d831461066d57600080fd5b8063c87b56dd146105ec578063ca15c873146105ff578063cdd7ec9f1461061257600080fd5b8063a217fddf11610150578063b88d4fde1161012a578063b88d4fde146105a6578063baec3189146105b9578063c06d4b71146105cc57600080fd5b8063a217fddf14610578578063a22cb46514610580578063aaa3e92e1461059357600080fd5b806391d148541161018157806391d148541461052657806394bf804d1461055d57806395d89b411461057057600080fd5b80638456cb591461050b5780639010d07c1461051357600080fd5b806330176e13116102605780635c975abb116102095780636405bfca116101e35780636405bfca146104c557806364948ecf146104e557806370a08231146104f857600080fd5b80635c975abb146104945780635f23d35c1461049f5780636352211e146104b257600080fd5b806342842e0e1161023a57806342842e0e1461045b57806342966c681461046e5780634f6ccce71461048157600080fd5b806330176e131461042d57806336568abe146104405780633f4ba83a1461045357600080fd5b806318160ddd116102c2578063248a9ca31161029c578063248a9ca3146103e45780632f2ff15d146104075780632f745c591461041a57600080fd5b806318160ddd1461039f578063186a58ca146103b157806323b872dd146103d157600080fd5b806306fdde03116102f357806306fdde031461034a578063081812fc1461035f578063095ea7b31461038a57600080fd5b806301ffc9a71461030f578063034601ec14610337575b600080fd5b61032261031d366004612e19565b610750565b60405190151581526020015b60405180910390f35b610322610345366004612f19565b610761565b6103526107af565b60405161032e9190612fcf565b61037261036d366004612fe2565b610841565b6040516001600160a01b03909116815260200161032e565b61039d610398366004612ffb565b6108db565b005b600a545b60405190815260200161032e565b6103c46103bf366004613025565b610a0d565b60405161032e919061305a565b61039d6103df3660046130a7565b610ac8565b6103a36103f2366004612fe2565b60009081526020819052604090206001015490565b61039d6104153660046130e3565b610b50565b6103a3610428366004612ffb565b610b76565b61032261043b366004613167565b610c1e565b61039d61044e3660046130e3565b610c73565b61039d610cff565b61039d6104693660046130a7565b610da5565b61039d61047c366004612fe2565b610dc0565b6103a361048f366004612fe2565b610e47565b600c5460ff16610322565b6103226104ad3660046131b0565b610eeb565b6103726104c0366004612fe2565b610f51565b6104d86104d3366004613025565b610fdc565b60405161032e91906132b1565b6103226104f33660046132c4565b6110c0565b6103a3610506366004613338565b61111d565b61039d6111b7565b610372610521366004613353565b61125b565b6103226105343660046130e3565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b61032261056b3660046130e3565b61127a565b610352611286565b6103a3600081565b61039d61058e366004613375565b611295565b6103226105a13660046133b1565b6112a0565b61039d6105b43660046133dd565b6112b5565b6103226105c7366004613353565b611343565b6103a36105da366004612fe2565b600e6020526000908152604090205481565b6103526105fa366004612fe2565b61134f565b6103a361060d366004612fe2565b611393565b6106256106203660046133b1565b6113aa565b60405161032e929190613459565b6103a37f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b61039d6106683660046130e3565b6114e5565b61068061067b366004612fe2565b61150b565b60405161032e919061347b565b61062561069b366004613353565b6115b6565b6103226106ae366004613025565b6116e9565b6103a37f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b6103226106e836600461348e565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b6103226107243660046134b8565b611733565b6103a37f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b0881565b600061075b82611829565b92915050565b6000805b82518110156107a4576107928585858481518110610785576107856134fd565b6020026020010151610da5565b8061079c81613529565b915050610765565b506001949350505050565b6060600280546107be90613544565b80601f01602080910402602001604051908101604052809291908181526020018280546107ea90613544565b80156108375780601f1061080c57610100808354040283529160200191610837565b820191906000526020600020905b81548152906001019060200180831161081a57829003601f168201915b5050505050905090565b6000818152600460205260408120546001600160a01b03166108bf5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600660205260409020546001600160a01b031690565b60006108e682610f51565b9050806001600160a01b0316836001600160a01b031614156109705760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084016108b6565b336001600160a01b038216148061098c575061098c81336106e8565b6109fe5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060648201526084016108b6565b610a088383611867565b505050565b60606000825167ffffffffffffffff811115610a2b57610a2b612e52565b604051908082528060200260200182016040528015610a54578160200160208202803683370190505b50905060005b8351811015610ac157610a85848281518110610a7857610a786134fd565b6020026020010151610f51565b828281518110610a9757610a976134fd565b6001600160a01b039092166020928302919091019091015280610ab981613529565b915050610a5a565b5092915050565b610ad3335b826118e2565b610b455760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f76656400000000000000000000000000000060648201526084016108b6565b610a088383836119d5565b600082815260208190526040902060010154610b6c8133611bba565b610a088383611c38565b6000610b818361111d565b8210610bf55760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201527f74206f6620626f756e647300000000000000000000000000000000000000000060648201526084016108b6565b506001600160a01b03919091166000908152600860209081526040808320938352929052205490565b600080805260208190527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb654610c548133611bba565b8251610c6790600d906020860190612d6a565b50600191505b50919050565b6001600160a01b0381163314610cf15760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084016108b6565b610cfb8282611c5a565b5050565b610d297f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a33610534565b610d9b5760405162461bcd60e51b815260206004820152602b60248201527f417274696c6c6572793a206d75737420686176652070617573657220726f6c6560448201527f20746f20756e706175736500000000000000000000000000000000000000000060648201526084016108b6565b610da3611c7c565b565b610a08838383604051806020016040528060008152506112b5565b610dc933610acd565b610e3b5760405162461bcd60e51b815260206004820152603060248201527f4552433732314275726e61626c653a2063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f7665640000000000000000000000000000000060648201526084016108b6565b610e4481611d18565b50565b6000610e52600a5490565b8210610ec65760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201527f7574206f6620626f756e6473000000000000000000000000000000000000000060648201526084016108b6565b600a8281548110610ed957610ed96134fd565b90600052602060002001549050919050565b6000805b8351811015610f4757610f34848281518110610f0d57610f0d6134fd565b6020026020010151848381518110610f2757610f276134fd565b6020026020010151611dcc565b5080610f3f81613529565b915050610eef565b5060019392505050565b6000818152600460205260408120546001600160a01b03168061075b5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e000000000000000000000000000000000000000000000060648201526084016108b6565b60606000825167ffffffffffffffff811115610ffa57610ffa612e52565b60405190808252806020026020018201604052801561105f57816020015b61104c604051806080016040528060008152602001606081526020016000815260200160006001600160a01b031681525090565b8152602001906001900390816110185790505b50905060005b8351811015610ac157611090848281518110611083576110836134fd565b602002602001015161150b565b8282815181106110a2576110a26134fd565b602002602001018190525080806110b890613529565b915050611065565b6000805b84518110156107a45761110a8582815181106110e2576110e26134fd565b60200260200101518583815181106110fc576110fc6134fd565b602002602001015185611eed565b508061111581613529565b9150506110c4565b60006001600160a01b03821661119b5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f20616464726573730000000000000000000000000000000000000000000060648201526084016108b6565b506001600160a01b031660009081526005602052604090205490565b6111e17f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a33610534565b6112535760405162461bcd60e51b815260206004820152602960248201527f417274696c6c6572793a206d75737420686176652070617573657220726f6c6560448201527f20746f207061757365000000000000000000000000000000000000000000000060648201526084016108b6565b610da3611f3c565b60008281526001602052604081206112739083611fc4565b9392505050565b60006112738383611fd0565b6060600380546107be90613544565b610cfb338383612007565b60006112ad848484611eed565b949350505050565b6112bf33836118e2565b6113315760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f76656400000000000000000000000000000060648201526084016108b6565b61133d848484846120d6565b50505050565b60006112738383611dcc565b6060611359612154565b61136283612163565b61136b84612261565b60405160200161137d93929190613579565b6040516020818303038152906040529050919050565b600081815260016020526040812061075b9061227c565b60606000806113b985876135ef565b90506000816113c78661111d565b6113d1919061360e565b9050858111156113de5750845b6113e78561111d565b82106113f1575060005b60008167ffffffffffffffff81111561140c5761140c612e52565b60405190808252806020026020018201604052801561147157816020015b61145e604051806080016040528060008152602001606081526020016000815260200160006001600160a01b031681525090565b81526020019060019003908161142a5790505b50905060005b828110156114cb57600061148f886104288488613625565b905061149a8161150b565b8383815181106114ac576114ac6134fd565b60200260200101819052505080806114c390613529565b915050611477565b50806114d68761111d565b94509450505050935093915050565b6000828152602081905260409020600101546115018133611bba565b610a088383611c5a565b61153f604051806080016040528060008152602001606081526020016000815260200160006001600160a01b031681525090565b611573604051806080016040528060008152602001606081526020016000815260200160006001600160a01b031681525090565b8281526000838152600e602052604090819020549082015261159483610f51565b6001600160a01b031660608201526115ab8361134f565b602082015292915050565b60606000806115c584866135ef565b90506000816115d3600a5490565b6115dd919061360e565b9050848111156115ea5750835b600a5482106115f7575060005b60008167ffffffffffffffff81111561161257611612612e52565b60405190808252806020026020018201604052801561167757816020015b611664604051806080016040528060008152602001606081526020016000815260200160006001600160a01b031681525090565b8152602001906001900390816116305790505b50905060005b828110156116d057600061169461048f8387613625565b905061169f8161150b565b8383815181106116b1576116b16134fd565b60200260200101819052505080806116c890613529565b91505061167d565b50806116db600a5490565b945094505050509250929050565b6000805b825181101561172a5761171883828151811061170b5761170b6134fd565b6020026020010151610dc0565b8061172281613529565b9150506116ed565b50600192915050565b6000805b8351811015610f4757611763848281518110611755576117556134fd565b602002602001015184611fd0565b508061176e81613529565b915050611737565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16610cfb576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556117d03390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000611273836001600160a01b038416612286565b60006001600160e01b031982167f780e9d6300000000000000000000000000000000000000000000000000000000148061075b575061075b826122d5565b6000818152600660205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03841690811790915581906118a982610f51565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600460205260408120546001600160a01b031661195b5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016108b6565b600061196683610f51565b9050806001600160a01b0316846001600160a01b031614806119a15750836001600160a01b031661199684610841565b6001600160a01b0316145b806112ad57506001600160a01b0380821660009081526007602090815260408083209388168352929052205460ff166112ad565b826001600160a01b03166119e882610f51565b6001600160a01b031614611a645760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201527f73206e6f74206f776e000000000000000000000000000000000000000000000060648201526084016108b6565b6001600160a01b038216611adf5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016108b6565b611aea838383612347565b611af5600082611867565b6001600160a01b0383166000908152600560205260408120805460019290611b1e90849061360e565b90915550506001600160a01b0382166000908152600560205260408120805460019290611b4c908490613625565b9091555050600081815260046020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16610cfb57611bf6816001600160a01b03166014612352565b611c01836020612352565b604051602001611c1292919061363d565b60408051601f198184030181529082905262461bcd60e51b82526108b691600401612fcf565b611c428282611776565b6000828152600160205260409020610a089082611814565b611c648282612517565b6000828152600160205260409020610a089082612596565b600c5460ff16611cce5760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016108b6565b600c805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6000611d2382610f51565b9050611d3181600084612347565b611d3c600083611867565b6001600160a01b0381166000908152600560205260408120805460019290611d6590849061360e565b9091555050600082815260046020526040808220805473ffffffffffffffffffffffffffffffffffffffff19169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b60007f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b08611df98133611bba565b6000838152600460205260409020546001600160a01b0316611e835760405162461bcd60e51b815260206004820152602b60248201527f4d49544e66743a2073657447656e7320717565727920666f72206e6f6e65786960448201527f7374656e7420746f6b656e00000000000000000000000000000000000000000060648201526084016108b6565b6000838152600e6020526040902054610f47576000838152600e6020526040908190208590555183907f717fefa17a87a6a7847dcfe292790a2f9e142cd24e93ddbf4b9acbd04c0766c590611edb9087815260200190565b60405180910390a25060019392505050565b60007f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b08611f1a8133611bba565b611f2483866125ab565b5050506000918252600e602052604090912055600190565b600c5460ff1615611f8f5760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016108b6565b600c805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611cfb3390565b600061127383836125c5565b60007f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b08611ffd8133611bba565b610f4783856125ab565b816001600160a01b0316836001600160a01b031614156120695760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016108b6565b6001600160a01b03838116600081815260076020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6120e18484846119d5565b6120ed848484846125ef565b61133d5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60648201526084016108b6565b6060600d80546107be90613544565b6060816121875750506040805180820190915260018152600360fc1b602082015290565b8160005b81156121b1578061219b81613529565b91506121aa9050600a836136d4565b915061218b565b60008167ffffffffffffffff8111156121cc576121cc612e52565b6040519080825280601f01601f1916602001820160405280156121f6576020820181803683370190505b5090505b84156112ad5761220b60018361360e565b9150612218600a866136e8565b612223906030613625565b60f81b818381518110612238576122386134fd565b60200101906001600160f81b031916908160001a90535061225a600a866136d4565b94506121fa565b6000818152600e602052604090205460609061075b90612163565b600061075b825490565b60008181526001830160205260408120546122cd5750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561075b565b50600061075b565b60006001600160e01b031982167f80ac58cd00000000000000000000000000000000000000000000000000000000148061233857506001600160e01b031982167f5b5e139f00000000000000000000000000000000000000000000000000000000145b8061075b575061075b8261272d565b610a0883838361276b565b606060006123618360026135ef565b61236c906002613625565b67ffffffffffffffff81111561238457612384612e52565b6040519080825280601f01601f1916602001820160405280156123ae576020820181803683370190505b509050600360fc1b816000815181106123c9576123c96134fd565b60200101906001600160f81b031916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110612414576124146134fd565b60200101906001600160f81b031916908160001a90535060006124388460026135ef565b612443906001613625565b90505b60018111156124c8577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110612484576124846134fd565b1a60f81b82828151811061249a5761249a6134fd565b60200101906001600160f81b031916908160001a90535060049490941c936124c1816136fc565b9050612446565b5083156112735760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016108b6565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1615610cfb576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000611273836001600160a01b0384166127ef565b610cfb8282604051806020016040528060008152506128e2565b60008260000182815481106125dc576125dc6134fd565b9060005260206000200154905092915050565b60006001600160a01b0384163b156107a457604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290612633903390899088908890600401613713565b6020604051808303816000875af192505050801561266e575060408051601f3d908101601f1916820190925261266b9181019061374f565b60015b612713573d80801561269c576040519150601f19603f3d011682016040523d82523d6000602084013e6126a1565b606091505b50805161270b5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60648201526084016108b6565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506112ad565b60006001600160e01b031982167f5a05180f00000000000000000000000000000000000000000000000000000000148061075b575061075b82612960565b6127768383836129c7565b600c5460ff1615610a085760405162461bcd60e51b815260206004820152602b60248201527f4552433732315061757361626c653a20746f6b656e207472616e73666572207760448201527f68696c652070617573656400000000000000000000000000000000000000000060648201526084016108b6565b600081815260018301602052604081205480156128d857600061281360018361360e565b85549091506000906128279060019061360e565b905081811461288c576000866000018281548110612847576128476134fd565b906000526020600020015490508087600001848154811061286a5761286a6134fd565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061289d5761289d61376c565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061075b565b600091505061075b565b6128ec8383612a7f565b6128f960008484846125ef565b610a085760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60648201526084016108b6565b60006001600160e01b031982167f7965db0b00000000000000000000000000000000000000000000000000000000148061075b57507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b031983161461075b565b6001600160a01b038316612a2257612a1d81600a80546000838152600b60205260408120829055600182018355919091527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a80155565b612a45565b816001600160a01b0316836001600160a01b031614612a4557612a458382612bda565b6001600160a01b038216612a5c57610a0881612c77565b826001600160a01b0316826001600160a01b031614610a0857610a088282612d26565b6001600160a01b038216612ad55760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016108b6565b6000818152600460205260409020546001600160a01b031615612b3a5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016108b6565b612b4660008383612347565b6001600160a01b0382166000908152600560205260408120805460019290612b6f908490613625565b9091555050600081815260046020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006001612be78461111d565b612bf1919061360e565b600083815260096020526040902054909150808214612c44576001600160a01b03841660009081526008602090815260408083208584528252808320548484528184208190558352600990915290208190555b5060009182526009602090815260408084208490556001600160a01b039094168352600881528383209183525290812055565b600a54600090612c899060019061360e565b6000838152600b6020526040812054600a8054939450909284908110612cb157612cb16134fd565b9060005260206000200154905080600a8381548110612cd257612cd26134fd565b6000918252602080832090910192909255828152600b9091526040808220849055858252812055600a805480612d0a57612d0a61376c565b6001900381819060005260206000200160009055905550505050565b6000612d318361111d565b6001600160a01b039093166000908152600860209081526040808320868452825280832085905593825260099052919091209190915550565b828054612d7690613544565b90600052602060002090601f016020900481019282612d985760008555612dde565b82601f10612db157805160ff1916838001178555612dde565b82800160010185558215612dde579182015b82811115612dde578251825591602001919060010190612dc3565b50612dea929150612dee565b5090565b5b80821115612dea5760008155600101612def565b6001600160e01b031981168114610e4457600080fd5b600060208284031215612e2b57600080fd5b813561127381612e03565b80356001600160a01b0381168114612e4d57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612e9157612e91612e52565b604052919050565b600082601f830112612eaa57600080fd5b8135602067ffffffffffffffff821115612ec657612ec6612e52565b8160051b612ed5828201612e68565b9283528481018201928281019087851115612eef57600080fd5b83870192505b84831015612f0e57823582529183019190830190612ef5565b979650505050505050565b600080600060608486031215612f2e57600080fd5b612f3784612e36565b9250612f4560208501612e36565b9150604084013567ffffffffffffffff811115612f6157600080fd5b612f6d86828701612e99565b9150509250925092565b60005b83811015612f92578181015183820152602001612f7a565b8381111561133d5750506000910152565b60008151808452612fbb816020860160208601612f77565b601f01601f19169290920160200192915050565b6020815260006112736020830184612fa3565b600060208284031215612ff457600080fd5b5035919050565b6000806040838503121561300e57600080fd5b61301783612e36565b946020939093013593505050565b60006020828403121561303757600080fd5b813567ffffffffffffffff81111561304e57600080fd5b6112ad84828501612e99565b6020808252825182820181905260009190848201906040850190845b8181101561309b5783516001600160a01b031683529284019291840191600101613076565b50909695505050505050565b6000806000606084860312156130bc57600080fd5b6130c584612e36565b92506130d360208501612e36565b9150604084013590509250925092565b600080604083850312156130f657600080fd5b8235915061310660208401612e36565b90509250929050565b600067ffffffffffffffff83111561312957613129612e52565b61313c601f8401601f1916602001612e68565b905082815283838301111561315057600080fd5b828260208301376000602084830101529392505050565b60006020828403121561317957600080fd5b813567ffffffffffffffff81111561319057600080fd5b8201601f810184136131a157600080fd5b6112ad8482356020840161310f565b600080604083850312156131c357600080fd5b823567ffffffffffffffff808211156131db57600080fd5b6131e786838701612e99565b935060208501359150808211156131fd57600080fd5b5061320a85828601612e99565b9150509250929050565b8051825260006020820151608060208501526132336080850182612fa3565b9050604083015160408501526001600160a01b0360608401511660608501528091505092915050565b600081518084526020808501808196508360051b8101915082860160005b858110156132a4578284038952613292848351613214565b9885019893509084019060010161327a565b5091979650505050505050565b602081526000611273602083018461325c565b6000806000606084860312156132d957600080fd5b833567ffffffffffffffff808211156132f157600080fd5b6132fd87838801612e99565b9450602086013591508082111561331357600080fd5b5061332086828701612e99565b92505061332f60408501612e36565b90509250925092565b60006020828403121561334a57600080fd5b61127382612e36565b6000806040838503121561336657600080fd5b50508035926020909101359150565b6000806040838503121561338857600080fd5b61339183612e36565b9150602083013580151581146133a657600080fd5b809150509250929050565b6000806000606084860312156133c657600080fd5b833592506020840135915061332f60408501612e36565b600080600080608085870312156133f357600080fd5b6133fc85612e36565b935061340a60208601612e36565b925060408501359150606085013567ffffffffffffffff81111561342d57600080fd5b8501601f8101871361343e57600080fd5b61344d8782356020840161310f565b91505092959194509250565b60408152600061346c604083018561325c565b90508260208301529392505050565b6020815260006112736020830184613214565b600080604083850312156134a157600080fd5b6134aa83612e36565b915061310660208401612e36565b600080604083850312156134cb57600080fd5b823567ffffffffffffffff8111156134e257600080fd5b6134ee85828601612e99565b92505061310660208401612e36565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060001982141561353d5761353d613513565b5060010190565b600181811c9082168061355857607f821691505b60208210811415610c6d57634e487b7160e01b600052602260045260246000fd5b6000845161358b818460208901612f77565b80830190507f2f0000000000000000000000000000000000000000000000000000000000000080825285516135c7816001850160208a01612f77565b600192019182015283516135e2816002840160208801612f77565b0160020195945050505050565b600081600019048311821515161561360957613609613513565b500290565b60008282101561362057613620613513565b500390565b6000821982111561363857613638613513565b500190565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351613675816017850160208801612f77565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516136b2816028840160208801612f77565b01602801949350505050565b634e487b7160e01b600052601260045260246000fd5b6000826136e3576136e36136be565b500490565b6000826136f7576136f76136be565b500690565b60008161370b5761370b613513565b506000190190565b60006001600160a01b038087168352808616602084015250836040830152608060608301526137456080830184612fa3565b9695505050505050565b60006020828403121561376157600080fd5b815161127381612e03565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220420f37518ee42c59a925040659c437df97e7a3fd48c510915a18e669d210c47264736f6c634300080a0033";

    public static final String FUNC_DEFAULT_ADMIN_ROLE = "DEFAULT_ADMIN_ROLE";

    public static final String FUNC_MANAGER_ROLE = "MANAGER_ROLE";

    public static final String FUNC_MINTER_ROLE = "MINTER_ROLE";

    public static final String FUNC_PAUSER_ROLE = "PAUSER_ROLE";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_BATCHBURN = "batchBurn";

    public static final String FUNC_BATCHMIGRATION = "batchMigration";

    public static final String FUNC_BATCHMINT = "batchMint";

    public static final String FUNC_BATCHOWNEROF = "batchOwnerOf";

    public static final String FUNC_BATCHSETGENS = "batchSetGens";

    public static final String FUNC_BURN = "burn";

    public static final String FUNC_GETALLNFTINFOBYPAGE = "getAllNftInfoByPage";

    public static final String FUNC_GETAPPROVED = "getApproved";

    public static final String FUNC_GETNFTINFO = "getNftInfo";

    public static final String FUNC_GETNFTINFOBYTOKENIDS = "getNftInfoByTokenIds";

    public static final String FUNC_GETOWNERNFTINFOBYPAGE = "getOwnerNftInfoByPage";

    public static final String FUNC_GETROLEADMIN = "getRoleAdmin";

    public static final String FUNC_GETROLEMEMBER = "getRoleMember";

    public static final String FUNC_GETROLEMEMBERCOUNT = "getRoleMemberCount";

    public static final String FUNC_GRANTROLE = "grantRole";

    public static final String FUNC_HASROLE = "hasRole";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_MIGRATION = "migration";

    public static final String FUNC_MINT = "mint";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_OWNEROF = "ownerOf";

    public static final String FUNC_PAUSE = "pause";

    public static final String FUNC_PAUSED = "paused";

    public static final String FUNC_RENOUNCEROLE = "renounceRole";

    public static final String FUNC_REVOKEROLE = "revokeRole";

    public static final String FUNC_SAFEBATCHTRANSFERFROM = "safeBatchTransferFrom";

    public static final String FUNC_safeTransferFrom = "safeTransferFrom";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_SETBASETOKENURI = "setBaseTokenURI";

    public static final String FUNC_SETGENS = "setGens";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TOKENBYINDEX = "tokenByIndex";

    public static final String FUNC_TOKENGENE = "tokenGene";

    public static final String FUNC_TOKENOFOWNERBYINDEX = "tokenOfOwnerByIndex";

    public static final String FUNC_TOKENURI = "tokenURI";

    public static final String FUNC_TOTALSUPPLY = "totalSupply";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_UNPAUSE = "unpause";

    public static final Event APPROVAL_EVENT = new Event("Approval", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event PAUSED_EVENT = new Event("Paused", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event ROLEADMINCHANGED_EVENT = new Event("RoleAdminChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Bytes32>(true) {}, new TypeReference<Bytes32>(true) {}));
    ;

    public static final Event ROLEGRANTED_EVENT = new Event("RoleGranted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event ROLEREVOKED_EVENT = new Event("RoleRevoked", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event SETGENE_EVENT = new Event("SetGene", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event UNPAUSED_EVENT = new Event("Unpaused", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
    }

    @Deprecated
    protected MITNft(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected MITNft(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected MITNft(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected MITNft(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalEventResponse>() {
            @Override
            public ApprovalEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVAL_EVENT, log);
                ApprovalEventResponse typedResponse = new ApprovalEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventFlowable(filter);
    }

    public List<ApprovalForAllEventResponse> getApprovalForAllEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalForAllEventResponse>() {
            @Override
            public ApprovalForAllEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVALFORALL_EVENT, log);
                ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALFORALL_EVENT));
        return approvalForAllEventFlowable(filter);
    }

    public List<PausedEventResponse> getPausedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(PAUSED_EVENT, transactionReceipt);
        ArrayList<PausedEventResponse> responses = new ArrayList<PausedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            PausedEventResponse typedResponse = new PausedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<PausedEventResponse> pausedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, PausedEventResponse>() {
            @Override
            public PausedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(PAUSED_EVENT, log);
                PausedEventResponse typedResponse = new PausedEventResponse();
                typedResponse.log = log;
                typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<PausedEventResponse> pausedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PAUSED_EVENT));
        return pausedEventFlowable(filter);
    }

    public List<RoleAdminChangedEventResponse> getRoleAdminChangedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ROLEADMINCHANGED_EVENT, transactionReceipt);
        ArrayList<RoleAdminChangedEventResponse> responses = new ArrayList<RoleAdminChangedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            RoleAdminChangedEventResponse typedResponse = new RoleAdminChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.previousAdminRole = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.newAdminRole = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RoleAdminChangedEventResponse> roleAdminChangedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RoleAdminChangedEventResponse>() {
            @Override
            public RoleAdminChangedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(ROLEADMINCHANGED_EVENT, log);
                RoleAdminChangedEventResponse typedResponse = new RoleAdminChangedEventResponse();
                typedResponse.log = log;
                typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.previousAdminRole = (byte[]) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.newAdminRole = (byte[]) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RoleAdminChangedEventResponse> roleAdminChangedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROLEADMINCHANGED_EVENT));
        return roleAdminChangedEventFlowable(filter);
    }

    public List<RoleGrantedEventResponse> getRoleGrantedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ROLEGRANTED_EVENT, transactionReceipt);
        ArrayList<RoleGrantedEventResponse> responses = new ArrayList<RoleGrantedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            RoleGrantedEventResponse typedResponse = new RoleGrantedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RoleGrantedEventResponse> roleGrantedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RoleGrantedEventResponse>() {
            @Override
            public RoleGrantedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(ROLEGRANTED_EVENT, log);
                RoleGrantedEventResponse typedResponse = new RoleGrantedEventResponse();
                typedResponse.log = log;
                typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RoleGrantedEventResponse> roleGrantedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROLEGRANTED_EVENT));
        return roleGrantedEventFlowable(filter);
    }

    public List<RoleRevokedEventResponse> getRoleRevokedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ROLEREVOKED_EVENT, transactionReceipt);
        ArrayList<RoleRevokedEventResponse> responses = new ArrayList<RoleRevokedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            RoleRevokedEventResponse typedResponse = new RoleRevokedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RoleRevokedEventResponse> roleRevokedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RoleRevokedEventResponse>() {
            @Override
            public RoleRevokedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(ROLEREVOKED_EVENT, log);
                RoleRevokedEventResponse typedResponse = new RoleRevokedEventResponse();
                typedResponse.log = log;
                typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RoleRevokedEventResponse> roleRevokedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROLEREVOKED_EVENT));
        return roleRevokedEventFlowable(filter);
    }

    public List<SetGeneEventResponse> getSetGeneEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(SETGENE_EVENT, transactionReceipt);
        ArrayList<SetGeneEventResponse> responses = new ArrayList<SetGeneEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            SetGeneEventResponse typedResponse = new SetGeneEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.gen = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SetGeneEventResponse> setGeneEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SetGeneEventResponse>() {
            @Override
            public SetGeneEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(SETGENE_EVENT, log);
                SetGeneEventResponse typedResponse = new SetGeneEventResponse();
                typedResponse.log = log;
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.gen = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SetGeneEventResponse> setGeneEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETGENE_EVENT));
        return setGeneEventFlowable(filter);
    }

    public List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TransferEventResponse>() {
            @Override
            public TransferEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFER_EVENT, log);
                TransferEventResponse typedResponse = new TransferEventResponse();

                if (eventValues == null) {
                    return typedResponse;
                }

                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }

    public List<UnpausedEventResponse> getUnpausedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(UNPAUSED_EVENT, transactionReceipt);
        ArrayList<UnpausedEventResponse> responses = new ArrayList<UnpausedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            UnpausedEventResponse typedResponse = new UnpausedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<UnpausedEventResponse> unpausedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, UnpausedEventResponse>() {
            @Override
            public UnpausedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(UNPAUSED_EVENT, log);
                UnpausedEventResponse typedResponse = new UnpausedEventResponse();
                typedResponse.log = log;
                typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<UnpausedEventResponse> unpausedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UNPAUSED_EVENT));
        return unpausedEventFlowable(filter);
    }

    public RemoteFunctionCall<byte[]> DEFAULT_ADMIN_ROLE() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DEFAULT_ADMIN_ROLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<byte[]> MANAGER_ROLE() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MANAGER_ROLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<byte[]> MINTER_ROLE() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MINTER_ROLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<byte[]> PAUSER_ROLE() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PAUSER_ROLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<TransactionReceipt> approve(String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new Address(to),
                new Uint256(tokenId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String owner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new Address(owner)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> batchBurn(List<BigInteger> tokenIds) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BATCHBURN, 
                Arrays.<Type>asList(new DynamicArray<Uint256>(
                        Uint256.class,
                        org.web3j.abi.Utils.typeMap(tokenIds, Uint256.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> batchMigration(List<BigInteger> tokenIds, List<BigInteger> gens, String owner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BATCHMIGRATION, 
                Arrays.<Type>asList(new DynamicArray<Uint256>(
                        Uint256.class,
                        org.web3j.abi.Utils.typeMap(tokenIds, Uint256.class)),
                new DynamicArray<Uint256>(
                        Uint256.class,
                        org.web3j.abi.Utils.typeMap(gens, Uint256.class)),
                new Address(owner)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> batchMint(List<BigInteger> tokenIds, String owner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BATCHMINT, 
                Arrays.<Type>asList(new DynamicArray<Uint256>(
                        Uint256.class,
                        org.web3j.abi.Utils.typeMap(tokenIds, Uint256.class)),
                new Address(owner)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<List> batchOwnerOf(List<BigInteger> tokenIds) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BATCHOWNEROF, 
                Arrays.<Type>asList(new DynamicArray<Uint256>(
                        Uint256.class,
                        org.web3j.abi.Utils.typeMap(tokenIds, Uint256.class))),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> batchSetGens(List<BigInteger> genes, List<BigInteger> tokenIds) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BATCHSETGENS, 
                Arrays.<Type>asList(new DynamicArray<Uint256>(
                        Uint256.class,
                        org.web3j.abi.Utils.typeMap(genes, Uint256.class)),
                new DynamicArray<Uint256>(
                        Uint256.class,
                        org.web3j.abi.Utils.typeMap(tokenIds, Uint256.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> burn(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BURN, 
                Arrays.<Type>asList(new Uint256(tokenId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple2<List<NftInfo>, BigInteger>> getAllNftInfoByPage(BigInteger page, BigInteger limit) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETALLNFTINFOBYPAGE, 
                Arrays.<Type>asList(new Uint256(page),
                new Uint256(limit)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<NftInfo>>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple2<List<NftInfo>, BigInteger>>(function,
                new Callable<Tuple2<List<NftInfo>, BigInteger>>() {
                    @Override
                    public Tuple2<List<NftInfo>, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<List<NftInfo>, BigInteger>(
                                convertToNative((List<NftInfo>) results.get(0).getValue()), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<String> getApproved(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETAPPROVED, 
                Arrays.<Type>asList(new Uint256(tokenId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<NftInfo> getNftInfo(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETNFTINFO, 
                Arrays.<Type>asList(new Uint256(tokenId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<NftInfo>() {}));
        return executeRemoteCallSingleValueReturn(function, NftInfo.class);
    }

    public RemoteFunctionCall<List> getNftInfoByTokenIds(List<BigInteger> tokenIds) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETNFTINFOBYTOKENIDS, 
                Arrays.<Type>asList(new DynamicArray<Uint256>(
                        Uint256.class,
                        org.web3j.abi.Utils.typeMap(tokenIds, Uint256.class))),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<NftInfo>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<Tuple2<List<NftInfo>, BigInteger>> getOwnerNftInfoByPage(BigInteger page, BigInteger limit, String owner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETOWNERNFTINFOBYPAGE, 
                Arrays.<Type>asList(new Uint256(page),
                new Uint256(limit),
                new Address(owner)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<NftInfo>>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple2<List<NftInfo>, BigInteger>>(function,
                new Callable<Tuple2<List<NftInfo>, BigInteger>>() {
                    @Override
                    public Tuple2<List<NftInfo>, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<List<NftInfo>, BigInteger>(
                                convertToNative((List<NftInfo>) results.get(0).getValue()), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<byte[]> getRoleAdmin(byte[] role) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETROLEADMIN, 
                Arrays.<Type>asList(new Bytes32(role)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<String> getRoleMember(byte[] role, BigInteger index) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETROLEMEMBER, 
                Arrays.<Type>asList(new Bytes32(role),
                new Uint256(index)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> getRoleMemberCount(byte[] role) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETROLEMEMBERCOUNT, 
                Arrays.<Type>asList(new Bytes32(role)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> grantRole(byte[] role, String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_GRANTROLE, 
                Arrays.<Type>asList(new Bytes32(role),
                new Address(account)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> hasRole(byte[] role, String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_HASROLE, 
                Arrays.<Type>asList(new Bytes32(role),
                new Address(account)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isApprovedForAll(String owner, String operator) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISAPPROVEDFORALL, 
                Arrays.<Type>asList(new Address(owner),
                new Address(operator)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> migration(BigInteger tokenId, BigInteger gene, String owner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MIGRATION, 
                Arrays.<Type>asList(new Uint256(tokenId),
                new Uint256(gene),
                new Address(owner)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> mint(BigInteger tokenId, String owner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MINT, 
                Arrays.<Type>asList(new Uint256(tokenId),
                new Address(owner)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> name() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> ownerOf(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNEROF, 
                Arrays.<Type>asList(new Uint256(tokenId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> pause() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_PAUSE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> paused() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PAUSED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceRole(byte[] role, String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEROLE, 
                Arrays.<Type>asList(new Bytes32(role),
                new Address(account)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> revokeRole(byte[] role, String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REVOKEROLE, 
                Arrays.<Type>asList(new Bytes32(role),
                new Address(account)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeBatchTransferFrom(String from, String to, List<BigInteger> tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SAFEBATCHTRANSFERFROM, 
                Arrays.<Type>asList(new Address(from),
                new Address(to),
                new DynamicArray<Uint256>(
                        Uint256.class,
                        org.web3j.abi.Utils.typeMap(tokenId, Uint256.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new Address(from),
                new Address(to),
                new Uint256(tokenId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId, byte[] _data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new Address(from),
                new Address(to),
                new Uint256(tokenId),
                new org.web3j.abi.datatypes.DynamicBytes(_data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setApprovalForAll(String operator, Boolean approved) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(new Address(operator),
                new Bool(approved)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setBaseTokenURI(String baseTokenURI) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETBASETOKENURI, 
                Arrays.<Type>asList(new Utf8String(baseTokenURI)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setGens(BigInteger gen, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETGENS, 
                Arrays.<Type>asList(new Uint256(gen),
                new Uint256(tokenId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> supportsInterface(byte[] interfaceId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SUPPORTSINTERFACE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> symbol() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> tokenByIndex(BigInteger index) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKENBYINDEX, 
                Arrays.<Type>asList(new Uint256(index)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> tokenGene(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKENGENE, 
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> tokenOfOwnerByIndex(String owner, BigInteger index) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKENOFOWNERBYINDEX, 
                Arrays.<Type>asList(new Address(owner),
                new Uint256(index)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> tokenURI(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKENURI, 
                Arrays.<Type>asList(new Uint256(tokenId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> totalSupply() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOTALSUPPLY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(String from, String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new Address(from),
                new Address(to),
                new Uint256(tokenId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> unpause() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UNPAUSE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static MITNft load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new MITNft(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static MITNft load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new MITNft(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static MITNft load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new MITNft(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static MITNft load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new MITNft(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<MITNft> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String name, String symbol, String baseUri, String managerAddr) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Utf8String(name),
                new Utf8String(symbol),
                new Utf8String(baseUri),
                new Address(managerAddr)));
        return deployRemoteCall(MITNft.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<MITNft> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String name, String symbol, String baseUri, String managerAddr) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Utf8String(name),
                new Utf8String(symbol),
                new Utf8String(baseUri),
                new Address(managerAddr)));
        return deployRemoteCall(MITNft.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<MITNft> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String name, String symbol, String baseUri, String managerAddr) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Utf8String(name),
                new Utf8String(symbol),
                new Utf8String(baseUri),
                new Address(managerAddr)));
        return deployRemoteCall(MITNft.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<MITNft> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String name, String symbol, String baseUri, String managerAddr) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Utf8String(name),
                new Utf8String(symbol),
                new Utf8String(baseUri),
                new Address(managerAddr)));
        return deployRemoteCall(MITNft.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class NftInfo extends DynamicStruct {
        public BigInteger tokenId;

        public String tokenUri;

        public BigInteger gene;

        public String owner;

        public NftInfo(BigInteger tokenId, String tokenUri, BigInteger gene, String owner) {
            super(new Uint256(tokenId),new Utf8String(tokenUri),new Uint256(gene),new Address(owner));
            this.tokenId = tokenId;
            this.tokenUri = tokenUri;
            this.gene = gene;
            this.owner = owner;
        }

        public NftInfo(Uint256 tokenId, Utf8String tokenUri, Uint256 gene, Address owner) {
            super(tokenId,tokenUri,gene,owner);
            this.tokenId = tokenId.getValue();
            this.tokenUri = tokenUri.getValue();
            this.gene = gene.getValue();
            this.owner = owner.getValue();
        }
    }

    public static class ApprovalEventResponse extends BaseEventResponse {
        public String owner;

        public String approved;

        public BigInteger tokenId;
    }

    public static class ApprovalForAllEventResponse extends BaseEventResponse {
        public String owner;

        public String operator;

        public Boolean approved;
    }

    public static class PausedEventResponse extends BaseEventResponse {
        public String account;
    }

    public static class RoleAdminChangedEventResponse extends BaseEventResponse {
        public byte[] role;

        public byte[] previousAdminRole;

        public byte[] newAdminRole;
    }

    public static class RoleGrantedEventResponse extends BaseEventResponse {
        public byte[] role;

        public String account;

        public String sender;
    }

    public static class RoleRevokedEventResponse extends BaseEventResponse {
        public byte[] role;

        public String account;

        public String sender;
    }

    public static class SetGeneEventResponse extends BaseEventResponse {
        public BigInteger tokenId;

        public BigInteger gen;
    }

    public static class TransferEventResponse extends BaseEventResponse {
        public String from;

        public String to;

        public BigInteger tokenId;
    }

    public static class UnpausedEventResponse extends BaseEventResponse {
        public String account;
    }
}
